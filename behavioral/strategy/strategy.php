<?php

/*
 * URL: http://phpshnik.ru/design-patterns/behavioral/strategy
 * 
 * Паттерны - Поведенческие
 * 
 * Стратегия (Strategy)
 * 
 * Определение: определяет семейство алгоритмов, инкапсулирует каждый их них 
 * и обеспечивает их взаимозаменяемость. Стратегия позволяет модифицировать алгоритмы независимо от их использования на стороне клиента.

Данный паттерн удовлетворяет сразу 3-м принципам проектирования:

    Инкапсулируйте то, что изменяется - создавая стратегию определите изменяющиеся аспекты и инкапсулируйте их, чтобы обезопасить код от случайных ошибок, вызванных непродуманным поведением переменного аспекта.
    Отдавайте предпочтение композиции перед наследованием - композиция более гибкий инструмент, нежели наследование. Часто необходимо наделить потомков какого-либо суперкласса схожим поведением, которое нельзя вынести в родительский класс, чтобы не переопределять методы других объектах, вот в таких-то случая не обойтись без композиции. Проблема в том, что это не всегда удается определить на стадии проектирования, вот поэтому всегда отдавайте предпочтение композиции.
    Программируйте на уровне интерфейсов, а не реализации - синоним другому принципу проектирования - "код должен зависеть от абстракций, а не от конкретных классов". Собственно работая с обобщениями, а не счастностями сложнее попасть в тупик дублирования кода, ведь главный принцип программиста - don't repeat your self.

Диаграмма классов:

Стратегия, пожалуй самый наиболее частоиспользуемый паттерн проектирования. Его не редко можно увидеть как в чистом виде, так и в частичном,- не всегда в коде имеются переменные аспекты, не всегда уместна композиция, в этом то и есть его преимущество: код, в который заложен паттерн стратегия очень гибок и не раз еще все его плюсы проявятся во время сопровождения кода.

Рассмотрим использования стратегии на примере ролевой игры:

Имеется абстрактный класс персонаж:
 * 
 */
